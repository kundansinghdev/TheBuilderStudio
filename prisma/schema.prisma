// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  ownedProjects    Project[]    @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  notifications    Notification[]
  auditLogs        AuditLog[]
  sessions         Session[]
  preferences      UserPreferences?
  apiKeys          ApiKey[]

  // Indexes
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

// User preferences
model UserPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  theme     Theme    @default(SYSTEM)
  language  String   @default("en")
  timezone  String   @default("UTC")
  notifications NotificationSettings?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Notification settings
model NotificationSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     Boolean  @default(true)
  push      Boolean  @default(true)
  sms       Boolean  @default(false)
  marketing Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user UserPreferences @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("notification_settings")
}

// Project model
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(DRAFT)
  type        ProjectType   @default(MVP)
  ownerId     String
  deadline    DateTime?
  budget      Float?
  tags        String[]
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  archivedAt  DateTime?

  // Relations
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  files       File[]
  activities  ProjectActivity[]
  auditLogs   AuditLog[]

  // Indexes
  @@index([ownerId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([archivedAt])
  @@map("projects")
}

// Project member
model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint
  @@unique([projectId, userId])
  @@map("project_members")
}

// File model
model File {
  id          String   @id @default(cuid())
  name        String
  originalName String
  size        Int
  type        String
  url         String
  projectId   String?
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project    Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  uploader   User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  // Indexes
  @@index([projectId])
  @@index([uploadedBy])
  @@index([type])
  @@index([createdAt])
  @@map("files")
}

// Project activity
model ProjectActivity {
  id        String   @id @default(cuid())
  projectId String
  type      ActivityType
  description String
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([projectId])
  @@index([type])
  @@index([createdAt])
  @@map("project_activities")
}

// Notification model
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  readAt    DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Session model
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

// API Key model
model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions String[]
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([key])
  @@index([isActive])
  @@map("api_keys")
}

// Audit log model
model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String
  changes    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  project Project? @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([resourceId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Feature flag model
model FeatureFlag {
  id                String   @id @default(cuid())
  name              String   @unique
  enabled           Boolean  @default(false)
  description       String?
  rolloutPercentage Float?   @default(100)
  targetUsers       String[]
  targetEnvironments String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Indexes
  @@index([name])
  @@index([enabled])
  @@map("feature_flags")
}

// System metrics model
model SystemMetrics {
  id        String   @id @default(cuid())
  cpu       Float
  memory    Float
  disk      Float
  networkIn Int
  networkOut Int
  timestamp DateTime @default(now())

  // Indexes
  @@index([timestamp])
  @@map("system_metrics")
}

// Health check model
model HealthCheck {
  id           String   @id @default(cuid())
  name         String
  status       HealthStatus
  responseTime Int
  error        String?
  lastChecked  DateTime @default(now())

  // Indexes
  @@index([name])
  @@index([status])
  @@index([lastChecked])
  @@map("health_checks")
}

// Enums
enum UserRole {
  ADMIN
  USER
  MODERATOR
  GUEST
}

enum ProjectStatus {
  DRAFT
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum ProjectType {
  MVP
  FEATURE
  BUGFIX
  REFACTOR
  RESEARCH
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ActivityType {
  CREATED
  UPDATED
  DELETED
  ARCHIVED
  RESTORED
  MEMBER_ADDED
  MEMBER_REMOVED
  FILE_UPLOADED
  FILE_DELETED
}

enum NotificationType {
  PROJECT_INVITE
  PROJECT_UPDATE
  FILE_UPLOAD
  SYSTEM_ALERT
  SECURITY_ALERT
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum HealthStatus {
  HEALTHY
  UNHEALTHY
  DEGRADED
} 